# -----------------------------------------------------------------------------
## nginx-only authentication via HTTP POST request (login form)
# (needs ngx-auth-request, ngx-set-misc, ngx-form-input, ngx-proxy, 
# ngx-realip, ngx-echo and ngx-encrypted-session modules)


access_log logs/access_log;
error_log logs/error.log;
events { worker_connections 1024; }

http {


# main server
server {
        listen 80;
        server_name example.com;
        root htdocs;
        error_log logs/error_log notice;
        access_log logs/access_log;

        index index.html;

        # default caching
        expires 0;
        add_header Cache-Control "private, must-revalidate, proxy-revalidate";

        # encryption key must be of 32 bytes long
        encrypted_session_key "C8Hf4qF59zdAF1axHr5daLdpPk1W4xIS";
        # iv must not be longer than 16 bytes
        encrypted_session_iv "VK2Y5MojsE9lNNCr";
        # session will be valid for 30 days or until next key/iv change
        encrypted_session_expires 30d;

        # set "X-Username" header to current username
        auth_request_set $username $upstream_http_x_username;
        # authenticate using the result of a request to /auth
        auth_request /auth;


        # authenticated default
        location / {
            # cache
            add_header Pragma no-cache;
            add_header Cache-Control "private, max-age=0, no-cache";
            expires 0;

            # max. cache for some filetypes
            location ~* \.(js|css|png|jpeg|jpg|gif|ico|pdf|svg|zip|swf|bmp|woff|ttf|json)$
            {
                expires max;
            }

            # take files from users directory
            alias htdocs/users/$username/;
        }

        # redirect when not authorized
        error_page 401 = @error401;
        location @error401 {
            if ($http_cookie ~* "auth") {
                # auth cookie present: login failure
                return 301 https://$server_name/login_failure.html;
                break;
            }
            # redirect to login form
            return 301 https://$server_name/login.html;
        }


        # logout
        location /logout {
            # disable cache
            add_header Pragma no-cache;
            add_header Cache-Control "private, max-age=0, no-cache";

            # remove Authorization header
            add_header Authorization "";

            # delete authtoken cookie (logout happens here)
            add_header Set-Cookie "auth='';Path=/;Max-Age=0;Secure;Discard;";

            # back to login
            return 301 https://$server_name/login.html;
        }

        # no authentication required here
        location /favicon.ico { auth_request off; }
        location /login.html { auth_request off; }
        location /login_failure.html { auth_request off; }


        # POST target of our login form
        location /login {
            # disable cache
            add_header Pragma no-cache;
            add_header Cache-Control "private, max-age=0, no-cache";

            # store form input in variables
            set_form_input $username;
            set_form_input $password;

            # decode
            set_unescape_uri $enc_user $username;
            set_unescape_uri $enc_pass $password;

            # construct encrypted auth-token
            set_encrypt_session $auth "${enc_user}:${enc_pass}";
            set_encode_base64 $auth;

            # set auth-token as cookie
            add_header Set-Cookie "auth=${auth};Path=/;Max-Age=2592000;Secure;Discard;";

            # redirect to welcome-page (login successful)
            return 301 https://$server_name/;
        }


        # authenticate with subrequest to server that uses auth_basic
        location /auth {
            # disable logging here
            access_log off;
            # decrypt authtoken
            set_decode_base64 $auth_crypt $cookie_auth;
            set_decrypt_session $auth $auth_crypt;
            # auth_basic method of proxy expects BASE64
            # encoded "Authorization" header (username:password)
            set_encode_base64 $auth;
            # set authentication headers (needed for http basic auth)
            proxy_set_header Authorization "Basic ${auth}";
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Original-Addr $remote_addr;
            # pass to authentication server
            proxy_pass_request_body off;
            proxy_pass_header Authorization;
            proxy_pass_header Content-Length;
            proxy_pass_header X-Original-URI;
            proxy_pass http://127.0.0.1:8888/auth;
       }

}

# authentication server (basic auth)
server {
    listen 127.0.0.1:8888;
    server_name example.com;
    root htdocs;

    # log the real client IP (for fail2ban)
    real_ip_header X-Original-Addr;
    set_real_ip_from 127.0.0.1;

    # basic authentication
    auth_basic "nginx only login-form (yay!)";
    auth_basic_user_file passwd;

    # authorized
    location / {
        # add username of authorized user as header,
        # so we can use it for user directories
        add_header X-Username $remote_user;
        echo "access granted";
    }
}

}
